_Pensamento computacional

Método de pensamento para melhores resoluções de problemas.
Baseado em quatro pilares, que são: Decomposição, Reconhecimento de padrões, Abstração e Algoritmos.
Com outras duas características inertes, que são: Raciocínio lógico e Aperfeiçoamento.

Raiocínio lógico = Pensar de forma coerente e lógica, buscando entender o problema e encontrar a melhor solução.

Aperfeiçoamento = Metódo de sempre estar melhorando as soluções já encontradas para encontrar uma solução cada vez melhor.

Decomposição = Habilidade de dividir um grande problema em problemas menores com soluções mais simples.

Reconhecimento de padrões = Habilidade de encontrar dados/informações que se repetem e entender a priorização das mesmas.

Abstração - Habilidade de extrapolar algo concreto em uma ideia abstrata e generalista.

Algoritmos - As instruções e forma como o homem transmitirá a informação para o computador.



_Lógica de programação

Metódo de pensamento utilizado para solucionalizar os problemas através da programação.
Possui 3 técnicas: Linear, Estruturada e Modular.

Linear = Seuqeunciado, em linha reta, ordenado.

Estruturada = Com opções, formando uma estrutura.

Modular = Dividida em módulos.



_Algoritmos

	Tipos: Numéricos, Caractere e Lógico
		Numérico = Números
		Caractere = Letras e Símbolos
		Lógico = Verdadeiro ou Falso
	Variável =  Dado volátil, que se altera durante o código
	Constante = Dado fixo, que permanece constante no código

	Instruções Primitivas = Palavras-chave que ordena o quê o computador deve fazer, como os operadores

	Estrutura Condicionada = Condição que divide o algoritmo em opções
		Simples = Só uma opção
		Composta = Opção e exceção
		Estruturada = Com várias opções e exceções
			Operadores: and, or e not
				And = Ambas informações devem ser verdadeiras
				Or = Só uma precisa ser verdadeira
				Not = O oposto

	Estruturas de repetição = Trecho do algoritmo que vai se repetir para redução de erros e linhas do código.

	Vetor = Variável dimensionada com tamanho pré-fixado
	Matriz = Tabela de variáveis

	Funções = Blocos que realizam tarefas específicas no código
	
	Entrada = Dados inseridos no computador
	Saída = Dados que são entregues pelo computador com os resultados do código
	
_Linguagens de programação

Linguagem que utilizamos para dar instruções ao computador. A primeira linguagem foi Assembly que era uma linguagem de máquina, cmo o tempo foram surgindo outras linguagens mais próximas do nosso modo de comunicação, que são chamadas de linguagens de alto nível.

Acompanha o desenvolvimento do hardware.

O computador utiliza um compilador para traduzir os códigos para linguagem de máquina. Nesse compilador ele executa análises no código-fonte.

São 3 análises: Léxica, Sintática e Semântica

Léxica = Particiona elementos chamados token, classifica os elementos e elimina coisas desnecessárias
Sintática = a forma do código, sintaxe
Semântica = significado do código, lógica


Código - Deve ser Legível, Redigível, Confiável e de baixo custo

Legível = de fácil compreensão
Redigível = de fácil escrita
Confiável = Fazer o que foi programado para fazer
Custo =  análise de impacto


_Paradigmas

Formas específicas de soluções de problemas através da programação
Classificadois em 6 tipos: Orientação à Objetos, Procedural, Funcional, Estruturado, Computação Distribuída e Lógico.
As mais utilizadas são Orientação à Objetos e Estruturada

Procedural = Chamadas sucessivas e procedimentos separados
Funcional = Instruções baseadas em funções
Estruturado = Blocos aninhados
Computação Distribuída = Funções executadas de forma independente

Estruturado = Enfatiza sequência e testes lógicos
Utilizada para resolver problemas simples e diretos e aprender programação

POO = Baseado em objetos e suas interações, fazendo analogia ao mundo real

Objeto = Possui características, comportament e estado específicos
Respondendo o quê tenho, o quê sou capaz de fazer e como faço.
Classificando um modelo através de atributos, métodos e estados.
Operações vinculadas ao objetos.
Pilares : Herança, Encapsulamento, Polimorfismo e Abstração

Herança = Classes filhas herdam comportamentos e estados gerais da classe mão, podendo possuir específicações.

Orientação à Objetos - reuso de código.


_Referências

Pensamento Computacional

https://www.cs.cmu.edu/~CompThink/resources/TheLinkWing.pdf

https://ubiquity.acm.org/article.cfm?id=1922682
https://www.youtube.com/watch?v=YVEUOHw3Qb8
https://simplificandoredes.com/historia-da-computacao/
https://simplificandoredes.com/pensamento-computacional/

Padrões

https://www.cin.ufpe.br/~if114/Monografias/Reconhecimento/
https://web.fe.up.pt/~jmsa/recpad/index.htm
https://www.teses.usp.br/teses/disponiveis/18/18133/tde-10072006-
002119/publico/Capitulo_2_mestrado.pdf
http://www.vision.ime.usp.br/~teo/publications/dissertacao/node9.html
https://periodicos.furg.br/vetor/article/view/3363/3811

Programação e Algoritmos

http://www.inf.ufes.br/~tavares/labcomp2000/aulas.htm
https://www.dca.fee.unicamp.br/cursos/EA876/apostila/HTML/
http://www.inf.ufes.br/~tavares/labcomp2000/aula1.htm

Algoritmos

Livro: Fundamentos da programação de computadores – Pearson
https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3t
WYp6V_F-5jb5L2iHb

Algoritmos- MIT

• José Augusto Manzano, Algoritmos -
lógica para desenvolvimento de programação de computadores, Ed. Érica,
17a ed. (ou mais recentre) - livro de referência
• Ana Fernandes
Ascencio, Fundamentos da programação de computadores - algoritmos,
Pascal, C/C e Java, Ed. Pearson, 2a ed.
• Andrew S. Tanenbaum, “Livro Organização Estruturada de Computadores”,
Ed. Pearson, 5a edição -- Capítulo 1
The Formal Semantics of Programming Languages, Glynn Winskel Deitel
e Deitel, “C++ How to Program”, 5th edition, Editora Prentice Hall, 2005 --
Capítulo 1
• Waldemar Celes, Renato Cerqueira e José Lucas Rangel,
"Introdução a Estrutura de Dados com Técnica de Programação em C",
Editora Campus-Elsevier, 2004 -- Capítulo 1